<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>libsoftphone</title>
    <style type="text/css" media="all">
body
{
	margin: 2em;
	padding: 0;
	font-family: Cambria, Times New Roman, Serif;
	font-size: x-large;
	background-color: #ffe1aa;
}

img#Logo
{
	float: right;
}

p
{
	text-align: justify;
}

code
{
	font-family: Consolas, Courier New, Monospace;
	color: #900;
}

a
{
	color: #00f;
	text-decoration: none;
}

a:hover
{
	text-decoration: underline;
}
    </style>
</head>
<body>

    <img id="Logo" src="libsoftphone_logo.png" alt="Acrobits Logo" />

    <h1>Acrobits libsoftphone</h1>
    <p>&copy; 2011-2012 Acrobits, s.r.o</p>
    <p><a href="http://www.acrobits.cz/">http://www.acrobits.cz/</a></p>
    
    <h2>Table of Contents</h2>
    <ol>
        <li>
            <p><a href="#Interface">InterfaceEx</a></p>
            <ul>
                <li><p><a href="#InstanceRegistration">Instance::RegistrationEx</a></p></li>
                <li><p><a href="#InstanceCalls">Instance::CallsEx</a></p></li>
                <li><p><a href="#InstanceMessaging">Instance::Messaging</a></p></li>
            </ul>
        </li>
    </ol>

    <h2 id="Interface">InterfaceEx</h2>

    <h3 id="InstanceSystem">InstanceEx</h3>
    <p>InstanceEx is a structure which gives access to advanced libsoftphone functionality like call transfers, conferencing, voicemail etc.</p>
    <dl>
        <dt><code>void setObserverEx( ObserverEx* observer )</code></dt>
        <dd>
            <p>Sets the <code>libsoftphone</code> extended observer, which receives information
            about progress of call transfers and about incoming voice mail.</p>
        </dd>
    </dl>
    
    <h3 id="InstanceRegistration">InstanceEx::RegistrationEx</h3>
    
    <p>Exposes methods to access extended features related to SIP accounts and registrations.</p>
    
    <dl>
        <dt><code>Voicemail::Record getVoicemail(
            ali::string const&amp; accountId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><p><code>ali::string const&amp; accountId</code></p></dt>
                        <dd>
                            <p>A string with the account ID of the account whose voicemail we'd like to receive.</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Return Value</dt>
                <dd>
                    <p>Returns the Voicemail::Record structure, which contains information about voicemail compiled from SIP
                    simple-message-summary content type.</p>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Use the Voicemail::Record::isValid() return value to check whether the returned structure contains meaningful data.</p>
                </dd>
            </dl>
        </dd>
    </dl>
    
    <h3 id="InstanceCalls">InstanceEx::Calls</h3>
    
    <p>Interface for call transfers and conferencing</a>.</p>
    
    <dl>
        <dt><code>ali::string const&amp; getGroupIdForCall(ali::string const&amp; callId) const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the call whose group we'd like to know.</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns the group ID of the call. Initially, every call is in its own group. Moving more than one call into the same
                    group creates a conference - audio is mixed and sent to all participants.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>ali::string const&amp; getActiveGroup() const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dd>
                            <p>none</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns the group of calls which is currently active. Calls in the active group will get sound from the microphone 
                    and their RTP audio streams will be played.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool setActiveGroup(ali::string const&amp; groupId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; groupId</code></dt>
                        <dd>
                            <p>group ID to make active</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Makes the group active by making sure all calls in the groups are taken off-hold and the the calls are marked
                    to send/receive audio. Any previously active group will be made inactive automaticall. The method returns true 
                    when successful.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool moveCall(ali::string const&amp; callId,ali::string const&amp; groupId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>call ID of the call which should be moved</p>
                        </dd>
                        <dt><code>ali::string const&amp; groupId</code></dt>
                        <dd>
                            <p>ID of the group to move the call to</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Moves the call into a group. All calls inside a group are in a conference - audio is mixed among them.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool splitCall(ali::string const&amp; callId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the call to remove from conference</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>This method creates a new, empty group and moves the call there. This is typically used when removing a call
                    from a conference.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>beginTransfer(ali::string const&amp; callId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the call which will be transfered (unattended transfer)</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Unattended transfer. Marks the call as "transfer pending" and puts it on hold. The user can now enter the number to transfer to and
                    call finishTransfer(...) to do the actual transfer. </p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool isTransferring(ali::string const&mp; callId) const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&mp; callId</code></dt>
                        <dd>
                            <p>ID of the call to check</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns whether the call is being transfered (unattended transfer)</p>
                </dd>
            </dl>
        </dd>
        <dt><code>void finishTransfer(ali::string const&amp; callId, ali::string const&amp; username, ali::string const&amp; domain)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the call to transfer. beginTransfer(...) should have been called to this call before.</p>
                        </dd>
                        <dt><code>ali::string const&amp; username</code></dt>
                        <dd>
                            <p>target SIP username</p>
                        </dd>
                        <dt><code>ali::string const&amp; domain</code></dt>
                        <dd>
                            <p>target SIP domain</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Unattended transfer. This method will complete the transfer of a call with callId to a SIP contact
                    username@domain. Result of the operation is reported via the ObserverEx interface.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>void cancelTransfer(ali::string const&amp; callId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the call whose transfer to cancel. beginTransfer(...) should have been called on this call.</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Cancels the transfer started by beginTransfer. The call is put off-hold in case it was not held when calling
                    beginTransfer.</p>
                </dd>
            </dl>
        </dd>

        <dt><code>beginForward(ali::string const&amp; callId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the call which will be forwarded</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Forwarding of an incoming call. Marks the call as "forward pending"</p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool isForwarding(ali::string const&mp; callId) const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&mp; callId</code></dt>
                        <dd>
                            <p>ID of the call to check</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns whether the call is being forwarded</p>
                </dd>
            </dl>
        </dd>
        <dt><code>void finishForward(ali::string const&amp; callId, ali::string const&amp; username, ali::string const&amp; domain)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the call to forward. beginForward(...) should have been called to this call before.</p>
                        </dd>
                        <dt><code>ali::string const&amp; username</code></dt>
                        <dd>
                            <p>target SIP username</p>
                        </dd>
                        <dt><code>ali::string const&amp; domain</code></dt>
                        <dd>
                            <p>target SIP domain</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Forwarding of an incoming call. This method will forward the call with callId to a SIP contact
                    username@domain. The call will be terminated by this operation, change of state will be reported via the Observer interface.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>void cancelForward(ali::string const&amp; callId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of the incoming call whose forwarding is to be cancel. beginForward(...) should have been called on this call.</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Cancels the forwarding. The incoming call is put back to its previous state and can be accepted or rejected.</p>
                </dd>
            </dl>
        </dd>
        
        <dt><code>bool attendedTransfer(ali::string const&amp; call, ali::string const&amp; targetCall)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; call</code></dt>
                        <dd>
                            <p>ID of the call to transfer.</p>
                        </dd>
                        <dt><code>ali::string const&amp; targetCall</code></dt>
                        <dd>
                            <p>ID of the call to transfer to.</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>The call with ID "call" will be referred to "targetCall". Used for attended transfer.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool rejectOfferedTransfer(ali::string const&amp; callId)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp;</code></dt>
                        <dd>
                            <p>ID of the call which has received a transfer request. Typically obtained through ObserverEx interface.</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Rejects the offered transfer.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>ali::string acceptOfferedTransfer(ali::string const&amp; callWithOffer,NetworkType::Type networkType)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callWithOffer</code></dt>
                        <dd>
                            <p>ID of the call which has received a transfer request. Typically obtained through ObserverEx interface.</p>
                        </dd>
                        <dt><code>NetworkType::Type networkType</code></dt>
                        <dd>
                            <p>The network type (3G/WiFi) to use when following the offered transfer.</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Accepts the transfer and returns a callId of a new call.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool isTransferOffered(ali::string const&amp; callId) const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of a call to check</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns true if there is an offered transfer for the given call ID.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>bool getOfferedTransferInfo(ali::string const&amp; callId, ali::string &amp; address, ali::string &amp; displayName) const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; callId</code></dt>
                        <dd>
                            <p>ID of a call to check</p>
                        </dd>
                        <dt><code>ali::string &amp; address</code></dt>
                        <dd>
                            <p>output parameter</p>
                        </dd>
                        <dt><code>ali::string &amp; display name</code></dt>
                        <dd>
                            <p>output parameter</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns true if there is a transfer offered for the given callId and fills in the "address" and "displayName" 
                    with the address and display name of the target contact where we're asked to transfer.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>int getGroupCount() const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                none
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns the number of call groups. Use for group enumeration.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>ali::string getGroup(int i) const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>int i</code></dt>
                        <dd>
                            <p>zero-based index</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns i-th groupId. Call with i=0..groupCount-1.</p>
                </dd>
            </dl>
        </dd>

        <dt><code>int getGroupSize(ali::string const&amp; groupId) const</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; groupId</code></dt>
                        <dd>
                            <p>ID of the group to query</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns the number of calls in the given group. Use for call enumeration.</p>
                </dd>
            </dl>
        </dd>
        <dt><code>ali::string getCallFromGroup(ali::string const&amp; groupId, int i)</code></dt>
        <dd>
            <dl>
                <dt>Parameters</dt>
                <dd>
                    <dl>
                        <dt><code>ali::string const&amp; groupId</code></dt>
                        <dd>
                            <p>ID of the group whose calls we want to get</p>
                        </dd>
                        <dt><code>int i</code></dt>
                        <dd>
                            <p>zero-based index</p>
                        </dd>
                    </dl>
                </dd>
                
                <dt>Remarks</dt>
                <dd>
                    <p>Returns i-th call from a given group. Call with i=0..groupSize-1.</p>
                </dd>
            </dl>
        </dd>

        
        <h3 id="InstanceMessaging">InstanceEx::Messaging</h3>
        
        <p>Exposes methods to access extended features related to SIP/SIMPLE messaging.</p>
        
        <dl>
            <dt><code>bool sendMessage(ali::string const&amp; accountId, SMS::Message &amp; msg)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>ali::string const&amp; accountId</code></p></dt>
                            <dd>
                                <p>A string with the account ID through which to send the message.</p>
                            </dd>
                            <dt><p><code>SMS::Message &amp; msg</code></p></dt>
                            <dd>
                                <p>The message object to send</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Return Value</dt>
                    <dd>
                        <p>returns false if sending fails immediatelly, or example because of invalid accountId or similar error. If the return value is true, the message state changes will be reported via the ObserverEx interface.</p>
                    </dd>
                    
                    <dt>Remarks</dt>
                    <dd>
                        <p>The account should have the allowMessage flag set. If it's a newly created message, it's messageId member will be filled to the unique identifier of the message.</p>
                    </dd>
                </dl>
            </dd>

            <dt><code>bool cancelSendMessage(unsigned long messageId)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>unsigned long messageId</code></p></dt>
                            <dd>
                                <p>ID of the message which should be to canceled</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Return Value</dt>
                    <dd>
                        <p>returns false if sending fails immediatelly, or example because of invalid messageId. If the return value is true, the message state changes will be reported via the ObserverEx interface.</p>
                    </dd>
                </dl>
            </dd>
            <dt><code>SMS::FetchResult fetchMessages(SMS::FetchConstraint const&amp; fc)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>SMS::FetchConstraint const&amp; fetchConstraint</code></p></dt>
                            <dd>
                                <p>a structure which defines a constraint for the fetched messages</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Return Value</dt>
                    <dd>
                        <p>Loads messages from SMS history. The messages are filtered and ordered according to the fetchConstraint parameter.</p>
                    </dd>
                </dl>
            </dd>
            <dt><code>SMS::FetchResult fetchTopConversations(int startAt, int limit)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>int startAt</code></p></dt>
                            <dd>
                                <p>index of first conversation to fetch</p>
                            </dd>
                            <dt><p><code>int limit</code></p></dt>
                            <dd>
                                <p>number of conversations to fetch</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Return Value</dt>
                    <dd>
                        <p>Loads the topmost message from each conversation thread and returns them in SMS::FetchResult structure.</p>
                    </dd>
                    
                    <dt>Remarks</dt>
                    <dd>
                        <p>SMS database organizes messages in threads, organized by message recipients. This method allows to fetch the last message from each thread and display it in some sort of "conversation view". Clicking the thread would then open the full list of messages in this thread, which can be loaded via fetchMessages.</p>
                        <p>The FetchResult structure also always returns the total number of records which exist and can be fetched.</p>
                    </dd>
                </dl>
            </dd>

            <dt><code>int getTotalCount()</code></dt>
            <dd>
                <dl>
                    <dt>Return Value</dt>
                    <dd>
                        <p>returns the total number of messages in history.</p>
                    </dd>
                </dl>
            </dd>

            <dt><code>int getTotalUnreadCount()</code></dt>
            <dd>
                <dl>
                    <dt>Return Value</dt>
                    <dd>
                        <p>returns the total number of unread messages in history.</p>
                    </dd>
                </dl>
            </dd>
            <dt><code>int getConversationCount()</code></dt>
            <dd>
                <dl>
                    <dt>Return Value</dt>
                    <dd>
                        <p>returns the total number of conversation threads in history.</p>
                    </dd>
                </dl>
            </dd>
            <dt><code>void markConversationRead(ali::string const&amp; recipients)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>ali::string const&amp; recipients</code></p></dt>
                            <dd>
                                <p>identifier of the conversation thread</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Remarks</dt>
                    <dd>
                        <p>Marks all messages in the conversation as read. Usually called when the user opens the page with the conversation.</p>
                    </dd>
                </dl>
            </dd>
            <dt><code>bool saveDraftMessage(ali::string const&amp; key, SMS::Message const&amp; msg)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>ali::string const&amp; key</code></p></dt>
                            <dd>
                                <p>identifier of the draft message.</p>
                            </dd>
                            <dt><p><code>SMS::Message const&amp; msg</code></p></dt>
                            <dd>
                                <p>the message to save</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Return Value</dt>
                    <dd>
                        <p>true, unless there is some database error. Message with the same key is overwritten if it exists.</p>
                    </dd>
                    
                    <dt>Remarks</dt>
                    <dd>
                        <p>Typically the "recipients" field is used as a key, which allows to have one draft message per conversation thread. If the user types a message and leaves the conversation page without sending it, it can be saved automatically as draft using this function and loaded whenever the user opens a conversation page.</p>
                    </dd>
                </dl>
            </dd>
            <dt><code>ali::auto_ptr<SMS::Message> loadDraftMessage(ali::string const&amp; key)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>ali::string const&amp; key</code></p></dt>
                            <dd>
                                <p>identifier of the draft message.</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Return Value</dt>
                    <dd>
                        <p>previously saved message, or null auto_ptr if it doesn't exist.</p>
                    </dd>
                    
                    <dt>Remarks</dt>
                    <dd>
                        <p>Loads previously saved draft message.</p>
                    </dd>
                </dl>
            </dd>
            <dt><code>void clearDraftMessage(ali::string const&amp; key)</code></dt>
            <dd>
                <dl>
                    <dt>Parameters</dt>
                    <dd>
                        <dl>
                            <dt><p><code>ali::string const&amp; key</code></p></dt>
                            <dd>
                                <p>identifier of the draft message.</p>
                            </dd>
                        </dl>
                    </dd>
                    
                    <dt>Remarks</dt>
                    <dd>
                        <p>Clears the previously saved draft message.</p>
                    </dd>
                </dl>
            </dd>
        </dl>
    </dl>
                
</body>
</html>
