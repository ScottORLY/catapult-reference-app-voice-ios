<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>libsoftphone</title>
    <style type="text/css" media="all">
body
{
	margin: 2em;
	padding: 0;
	font-family: Cambria, Times New Roman, Serif;
	font-size: x-large;
	background-color: #ffe1aa;
}

img#Logo
{
	float: right;
}

p
{
	text-align: justify;
}

code
{
	font-family: Consolas, Courier New, Monospace;
	color: #900;
}

a
{
	color: #00f;
	text-decoration: none;
}

a:hover
{
	text-decoration: underline;
}
    </style>
</head>
<body>

    <img id="Logo" src="libsoftphone_logo.png" alt="Acrobits Logo" />

    <h1>Acrobits libsoftphone</h1>
    <p>&copy; 2011-2012 Acrobits, s.r.o</p>
    <p><a href="http://www.acrobits.cz/">http://www.acrobits.cz/</a></p>
    
    <h2>Table of Contents</h2>
    <ol>
        <li>
            <p><a href="#Interface">InterfaceVideo</a></p>
            <ul>
                <li><p><a href="#InstanceVideo">InstanceVideo::Video</a></p></li>
            </ul>
        </li>
    </ol>

    <h2 id="Interface">InterfaceVideo</h2>

    <h3 id="InstanceVideo">InstanceVideo</h3>
    <p>InstanceVideo is a structure which gives access to video playback and capture. This interface is device-specific, this document describes iOS implementation.</p>
    <p>Video is available only on devices with ARMv7-NEON CPU, which are all devices starting from iPhone 3GS, all iPads and iPod 4th generation. Since iPad1 doesn't have camera, it can only be used for video playback.</p>
    <p>In order to make video calls, the SIP account needs to be properly configured for video, esp. video codecs need to be set. When making or answering the call, desiredMedia need to be set to voiceAndVideo.</p>
    
    
    <dt><code>bool isDeviceVideoCapable()</code></dt>
    <dd>
        <dl>
            <dt>Return Value</dt>
            <dd>
                <p>returns whether the current device can play or capture video. ARMv6 CPUs are not supported.</p>
            </dd>
        </dl>
    </dd>

    <dt><code>AVCaptureVideoPreviewLayer * getPreviewLayer()</code></dt>
    <dd>
        <dl>
            <dt>Return Value</dt>
            <dd>
                <p>IOS layer with camera preview from system CaptureSession.</p>
            </dd>
            
            <dt>Remarks</dt>
            <dd>
                <p>Add this layer to an UIView to show the preview of the video being sent. Note that the resolution being sent may not be the same as the native device resolution and that we may be actually sending a crop from the full preview image.</p>
                <p>See the demophone project on how to make sure the correct preview is displayed.</p>
            </dd>
        </dl>
    </dd>
    
    <dt><code>CGRect getPreviewLayerCroppingRect()</code></dt>
    <dd>
        <dl>
            <dt>Return Value</dt>
            <dd>
                <p>The current cropping CGRect, transformed as if it was to crop from a unit square.</p>
            </dd>
            
            <dt>Remarks</dt>
            <dd>
               <p>See the demophone project on how to make sure the correct preview is displayed.</p>
            </dd>
        </dl>
    </dd>
    
    <dt><code>CGAffineTransform getPreviewLayerFlipTransform()</code></dt>
    <dd>
        <dl>
            <dt>Return Value</dt>
            <dd>
                <p>Affine transform to be applied to the preview image.</p>
            </dd>
            
            <dt>Remarks</dt>
            <dd>
                <p>Some cameras mirror the camera image. In order to show the preview exactly as it will appear on the remote side, we need to mirror it back in some cases.</p>
                <p>See the demophone project on how to make sure the correct preview is displayed.</p>
            </dd>
        </dl>
    </dd>
    <dt><code>ali::size<int> currentVideoFormat()</code></dt>
    <dd>
        <dl>
            <dt>Return Value</dt>
            <dd>
                <p>returns the dimensions of the captured frames.</p>
            </dd>
        </dl>
    </dd>

    <dt><code>::Video::Capture::Transform const&amp; getCurrentFrameTransform()</code></dt>
    <dd>
        <dl>
            <dt>Return Value</dt>
            <dd>
                <p>Returns a reference to a struct with information on how the raw camera frames are processed.</p>
            </dd>
            
            <dt>Remarks</dt>
            <dd>
                <p>The frames may be scaled, rotated, cropped. This method is mostly for informational purposes.</p>
            </dd>
        </dl>
    </dd>

    <dt><code>int enumerateCameras(::Video::Capture::CameraInfo * cameras, int * camerasSize)</code></dt>
    <dd>
        <dl>
            <dt>Parameters</dt>
            <dd>
                <dl>
                    <dt><p><code>::Video::Capture::CameraInfo * cameras</code></p></dt>
                    <dd>
                        <p>a buffer to store CameraInfo structs</p>
                    </dd>
                    <dt><p><code>int * camerasSize</code></p></dt>
                    <dd>
                        <p>pointer which points to the size of the cameras array. On return, the value is overwritten with the total number of cameras which exists in the system</p>
                    </dd>
                </dl>
            </dd>
            
            <dt>Return Value</dt>
            <dd>
                <p>returns the number of structs which have been placed into the "cameras" array.</p>
            </dd>
            
            <dt>Remarks</dt>
            <dd>
                <p>To make sure the buffer is sufficient, call the function once with null cameras buffer and *camerasSize value contains 0. Then read the *camerasSize value, allocate the buffer of this size and call again.</p>
            </dd>
        </dl>
    </dd>
    

    <dt><code>bool switchCamera(ali::string const&amp; cameraId)</code></dt>
    <dd>
        <dl>
            <dt>Parameters</dt>
            <dd>
                <dl>
                    <dt><p><code>ali::string const&amp; cameraId</code></p></dt>
                    <dd>
                        <p>identifier of the camera to switch to, obtained via enumerateCameras method.</p>
                    </dd>
                </dl>
            </dd>
            
            <dt>Return Value</dt>
            <dd>
                <p>returns false on failure, typically because the cameraId is not valid.</p>
            </dd>
        </dl>
    </dd>

    <dt><code>::Video::Capture::CameraInfo getCurrentCamera()</code></dt>
    <dd>
        <dl>
            <dt>Return Value</dt>
            <dd>
                <p>returns the currently selected camera.</p>
            </dd>
        </dl>
    </dd>

    <dt><code>SoftphoneVideoView * createCallVideoView(ali::string const&amp; callId)</code></dt>
    <dd>
        <dl>
            <dt>Parameters</dt>
            <dd>
                <dl>
                    <dt><p><code>ali::string const&amp; cameraId</code></p></dt>
                    <dd>
                        <p>callId of the call whose video to display</p>
                    </dd>
                </dl>
            </dd>
            
            <dt>Return Value</dt>
            <dd>
                <p>SoftphoneVideoView instance, which will draw itself internally and show the remote video for this call.</p>
            </dd>
        </dl>
    </dd>

</body>
</html>
