#pragma once

namespace ali
{

// Generator of sequences just like Python's xrange
// ******************************************************************
class xrange
// ******************************************************************
{
public:
    // ******************************************************************
    class iterator
    // ******************************************************************
    {
    public:
        // ******************************************************************
        iterator(int current)
        // ******************************************************************
            : _current(current)
        {}

        // ******************************************************************
        friend bool operator ==(iterator const& a,
                                iterator const& b)
        // ******************************************************************
        {
            return a._current == b._current;
        }

        // ******************************************************************
        friend bool operator !=(iterator const& a,
                                iterator const& b)
        // ******************************************************************
        {
            return a._current != b._current;
        }

        // ******************************************************************
        friend bool operator <(iterator const& a,
                               iterator const& b)
        // ******************************************************************
        {
            return a._current < b._current;
        }

        // ******************************************************************
        friend bool operator <=(iterator const& a,
                                iterator const& b)
        // ******************************************************************
        {
            return a._current <= b._current;
        }

        // ******************************************************************
        friend bool operator >(iterator const& a,
                               iterator const& b)
        // ******************************************************************
        {
            return a._current > b._current;
        }

        // ******************************************************************
        friend bool operator >=(iterator const& a,
                                iterator const& b)
        // ******************************************************************
        {
            return a._current >= b._current;
        }

        // ******************************************************************
        int operator *() const
        // ******************************************************************
        {
            return _current;
        }

        // ******************************************************************
        iterator& operator ++()
        // ******************************************************************
        {
            ++_current;
            return *this;
        }

        // ******************************************************************
        iterator operator ++(int)
        // ******************************************************************
        {
            iterator ret = *this;
            ++_current;
            return ret;
        }

        // ******************************************************************
        iterator& operator --()
        // ******************************************************************
        {
            --_current;
            return *this;
        }

        // ******************************************************************
        iterator operator --(int)
        // ******************************************************************
        {
            iterator ret = *this;
            --_current;
            return ret;
        }

    protected:
        int _current;
    };


    // ******************************************************************
    xrange(int stop)
    // ******************************************************************
        : _start(0)
        , _stop(stop)
    {}

    // ******************************************************************
    xrange(int start,
           int stop)
    // ******************************************************************
        : _start(start)
        , _stop(stop)
    {}

    // ******************************************************************
    friend bool operator ==(xrange const& a,
                            xrange const& b)
    // ******************************************************************
    {
        return a._start == b._start
            && a._stop == b._stop;
    }

    // ******************************************************************
    friend bool operator !=(xrange const& a,
                            xrange const& b)
    // ******************************************************************
    {
        return !(a == b);
    }

    // ******************************************************************
    int start() const
    // ******************************************************************
    {
        return _start;
    }

    // ******************************************************************
    int stop() const
    // ******************************************************************
    {
        return _stop;
    }

    // ******************************************************************
    iterator begin() const
    // ******************************************************************
    {
        return iterator(_start);
    }

    // ******************************************************************
    iterator end() const
    // ******************************************************************
    {
        return iterator(_stop);
    }

protected:
    int _start;
    int _stop;
};

}
